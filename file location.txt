C:\Users\Dell G3\OneDrive\เอกสาร\I2P2-MiniChess

/mnt/c/Users/Dell\ G3/OneDrive/เอกสาร/I2P2-MiniChess

./build/main ./build/player_random ./build/baseline1

./build/main ./build/player_minimax ./build/baseline1
./build/main ./build/baseline1 ./build/player_minimax

./build/main ./build/player_mini_alphabeta ./build/baseline1
./build/main ./build/baseline1 ./build/player_mini_alphabeta
./build/main ./build/player_mini_alphabeta ./build/baseline2
./build/main ./build/baseline2 ./build/player_mini_alphabeta

./build/main ./build/player_minimax ./build/player_mini_alphabeta
./build/main ./build/player_mini_alphabeta ./build/player_minimax

./build/main ./build/baseline2 ./build/player_random


const int W_pawn_value[6][5] = {
    0,   0,   0,   0,   0,
   50,  50,  50,  50,  50,
   10,  20,  30,  20,  10,
   -5,   5,  10,   5,   0, 
  -10,   0,   0, -10, -20,
    0,   0,   0,   0,   0
};
const int B_pawn_value[6][5] = {
    0,   0,   0,   0,   0,
  -20, -10,   0,   0, -10,
    0,   5,  10,   5,  -5,
   10,  20,  30,  20,  10, 
   50,  50,  50,  50,  50,
    0,   0,   0,   0,   0
};

//const int rook_value = 6;

const int W_rook_value[6][5] = {
    0,   0,   0,   0,   0,
    5,  10,  10,  10,  10,
   -5,   0,   0,   0,  -5,
   -5,   0,   0,   0,  -5, 
   -5,   0,   0,   0,  -5,
    0,   0,   0,   0,   0
};
const int B_rook_value[6][5] = {
    0,   0,   0,   0,   0,
   -5,   0,   0,   0,  -5,
   -5,   0,   0,   0,  -5,
   -5,   0,   0,   0,  -5, 
   10,  10,  10,  10,   5,
    0,   0,   0,   0,   0
};
//const int knight_value = 7;

const int W_knight_value[6][5] = {
  -40, -20, -10, -20, -40,
  -30,   0,   0,   0, -30,
  -10,   5,  10,   5, -20,
    5,   0,   5,   0, -20, 
  -30,   0,   0,   0, -30,
  -40, -20, -10, -20, -40
};
const int B_knight_value[6][5] = {
  -40, -20, -10, -20, -40,
  -30,   0,   0,   0, -30,
  -20,   0,   5,   0,   5,
  -20,   5,  10,   5, -10, 
  -30,   0,   0,   0, -30,
  -40, -20, -10, -20, -40
};
//const int bishop_value = 8;

const int W_bishop_value[6][5] = {
  -20, -10, -10, -10, -20, 
  -10,   0,   0,   0, -10, 
  -10,   0,   5,   0, -10, 
  -10,  10,  10,  10, -10, 
  -10,   5,   0,   5,   0,
  -20, -10, -10, -10, -20
};
const int B_bishop_value[6][5] = {
  -20, -10, -10, -10, -20, 
    0,   5,   0,   5, -10, 
  -10,  10,  10,  10, -10, 
  -10,   0,   5,   0, -10, 
  -10,   0,   0,   0, -10,
  -20, -10, -10, -10, -20
};
//const int queen_value = 20;

const int W_queen_value[6][5] = {
   -5,  -5, -10, -10, -10,
   -5,   0,   0,   0,   0,
    0,   5,   5,   5,   0,
    0,   5,   5,   5,   0,
    0,   0,   5,   0,   5,
   -5, -10, -10,  -5,  -5
};
const int B_queen_value[6][5] = {
   -5,  -5, -10, -10,  -5,
    5,   0,   5,   0,   0,
    0,   5,   5,   5,   0,
    0,   5,   5,   5,   0,
    0,   0,   0,   0,   0,
  -10, -10, -10,  -5,  -5
};
//const int king_value = 1000000000;

const int W_king_value[6][5] = {
  -50, -50, -40, -40, -30,
  -50, -50, -40, -40, -30,
  -50, -40, -30, -30, -30,
  -10, -20, -20, -20, -20,
   10,   0,   0,   0,   0,
   10,  10,   5,   0,   0
};
const int B_king_value[6][5] = {
    0,   0,   5,  10,  10,
    0,   0,   0,   0,  10,
  -20, -20, -20, -20, -10,
  -30, -30, -30, -40, -50,
  -30, -40, -40, -50, -50,
  -30, -40, -40, -50, -50
};


int State::evaluate(){
  // [TODO] design your own evaluation function
  int pl1=0, pl2=0;
  for(int i = 0; i<2; i++)
  {
    for(int j = 0; j<BOARD_H; j++)
    {
      for(int k = 0; k<BOARD_W; k++)
      {
        if(i == 0)
        {
          if(this->board.board[i][j][k] == '1' || this->board.board[i][j][k] == 1)
          {
            pl1 += 2;
          }
          if(this->board.board[i][j][k] == '2' || this->board.board[i][j][k] == 2)
          {
            pl1 += 6;
          }
          if(this->board.board[i][j][k] == '3' || this->board.board[i][j][k] == 3)
          {
            pl1 += 7;
          }
          if(this->board.board[i][j][k] == '4' || this->board.board[i][j][k] == 4)
          {
            pl1 += 8;
          }
          if(this->board.board[i][j][k] == '5' || this->board.board[i][j][k] == 5)
          {
            pl1 += 20;
          }
          if(this->board.board[i][j][k] == '6' || this->board.board[i][j][k] == 6)
          {
            pl1 += 100;
          }
        }
        else
        {
          if(this->board.board[i][j][k] == '1' || this->board.board[i][j][k] == 1)
          {
            pl2 += 2;
          }
          if(this->board.board[i][j][k] == '2' || this->board.board[i][j][k] == 2)
          {
            pl2 += 6;
          }
          if(this->board.board[i][j][k] == '3' || this->board.board[i][j][k] == 3)
          {
            pl2 += 7;
          }
          if(this->board.board[i][j][k] == '4' || this->board.board[i][j][k] == 4)
          {
            pl2 += 8;
          }
          if(this->board.board[i][j][k] == '5' || this->board.board[i][j][k] == 5)
          {
            pl2 += 20;
          }
          if(this->board.board[i][j][k] == '6' || this->board.board[i][j][k] == 6)
          {
            pl2 += 100;
          } 
        }
      }
    }
  }
  return pl1 - pl2;
}



int State::evaluate(){
//int piece_lock[7] = {0,2,6,7,8,20,1000};
// int ene_pawn = 1.5;
// int ene_rook = 3;
// int ene_knight = 4.5;
// int ene_bishop = 6;
// int ene_queen = 7.5;
// int ene_king = 9;

int pawn_value = 2;
int rook_value = 6;
int knight_value = 7;
int bishop_value = 8;
int queen_value = 20;
int king_value = 1000;

int score = 0; //default heuristic at 0. My score.
for(int i=0; i<2; i++){ //select which board to loop through
  int i_player = i;
    for(int j=0; j<6; j++){
      for(int k=0; k<5; k++){
        auto piece = this->board.board[i][j][k];
        switch(piece){
          case 1: //pawn
            //if(i_player == player){
              // if(i_player == 0){
              //   if(j-1 >=0 && k-1 >=0){
              //     if(this->board.board[1-i_player][j-1][k-1] > 0){
              //       auto check_enemy = this->board.board[1-i_player][j-1][k-1];
              //       score += piece_lock[check_enemy];
              //     }
              //     if(this->board.board[i_player][j-1][k-1] > 0){
              //       auto check_ally = this->board.board[i_player][j-1][k-1];
              //       score += piece_lock[check_ally];
              //     }
              //   }
              //   if(j-1 >=0 && k+1 < BOARD_W){
              //     if(this->board.board[1-i_player][j-1][k+1] > 0){
              //       auto check_enemy = this->board.board[1-i_player][j-1][k+1];
              //       score += piece_lock[check_enemy];
              //     }
              //     if(this->board.board[i_player][j-1][k+1] > 0){
              //       auto check_ally = this->board.board[i_player][j-1][k+1];
              //       score += piece_lock[check_ally];
              //     }
              //   }
              // }
              // else if(i_player == 1){
              //   if(j+1 < BOARD_H && k-1 >=0){
              //     if(this->board.board[1-i_player][j+1][k-1] > 0){
              //       auto check_enemy = this->board.board[1-i_player][j+1][k-1];
              //       score += piece_lock[check_enemy];
              //     }
              //     if(this->board.board[i_player][j+1][k-1] > 0){
              //       auto check_ally = this->board.board[i_player][j+1][k-1];
              //       score += piece_lock[check_ally];
              //     }
              //   }
              //   if(j+1 < BOARD_H && k+1 < BOARD_W){
              //     if(this->board.board[1-i_player][j+1][k+1] > 0){
              //       auto check_enemy = this->board.board[1-i_player][j+1][k+1];
              //       score += piece_lock[check_enemy];
              //     }
              //     if(this->board.board[i_player][j+1][k+1] > 0){
              //       auto check_ally = this->board.board[i_player][j+1][k+1];
              //       score += piece_lock[check_ally];
              //     }
              //   }
              // }
            //}
            score += (i_player == player)? pawn_value: -(pawn_value);
            break;
          case 2: //rook
            // if(i_player == player){
            // for(int l=1; l< 6; l++){
            //   if(j-l >=0){
            //     auto check_enemy = this->board.board[1-i_player][j-l][k];
            //     score += piece_lock[check_enemy];
            //   }
            //   if(j+l < BOARD_H){
            //     auto check_enemy = this->board.board[1-i_player][j+1][k];
            //     score += piece_lock[check_enemy];
            //   }
            //   if(k-l >=0){
            //     auto check_enemy = this->board.board[1-i_player][j][k-l];
            //     score += piece_lock[check_enemy];
            //   }
            //   if(k+l < BOARD_W){
            //     auto check_enemy = this->board.board[1-i_player][j][k+l];
            //     score += piece_lock[check_enemy];
            //   }
            // }
            // for(int l=1; l<5; l++){
            //   if(k-l >=0){
            //     if(this->board.board[1-i_player][j][k-l] > 0){
            //       auto check_enemy = this->board.board[1- i_player][l][k-l];
            //       switch(check_enemy){
            //         case 1:
            //           score += (i_player == player)? pawn_value : -(pawn_value); 
            //           break;
            //         case 2:
            //           score += (i_player == player)? rook_value: -(rook_value);
            //           break;
            //         case 3:
            //           score += (i_player == player)? knight_value: -(knight_value);
            //           break;
            //         case 4:
            //           score += (i_player == player)? bishop_value : -(bishop_value);
            //           break;
            //         case 5:
            //           score += (i_player == player)? queen_value : -(queen_value);
            //           break;
            //         case 6:
            //           score += (i_player == player)? king_value : -(king_value);
            //           break;
            //         default:
            //           break;
            //       }
            //     }
            //   }
            //   else break;
            // }
            // for(int l=1; l<5; l++){
            //   if(k+l < BOARD_W){
            //     if(this->board.board[1-i_player][j][k+l] > 0){
            //       auto check_enemy = this->board.board[1- i_player][l][k+l];
            //       switch(check_enemy){
            //         case 1:
            //           score += (i_player == player)? pawn_value : -(pawn_value); 
            //           break;
            //         case 2:
            //           score += (i_player == player)? rook_value: -(rook_value);
            //           break;
            //         case 3:
            //           score += (i_player == player)? knight_value: -(knight_value);
            //           break;
            //         case 4:
            //           score += (i_player == player)? bishop_value : -(bishop_value);
            //           break;
            //         case 5:
            //           score += (i_player == player)? queen_value : -(queen_value);
            //           break;
            //         case 6:
            //           score += (i_player == player)? king_value : -(king_value);
            //           break;
            //         default:
            //           break;
            //       }
            //     }
            //   }
            //   else break;
            // }
            //}
            score += (i_player == player)? rook_value: -(rook_value);
            break; 
          case 3: //knight
            // if(i_player == player){ //check eatable pieces around knight.
            //   if(this->board.board[1-i_player][j-2][k-1] > 0 && j-2 >=0 && k-1 >=0){
            //     auto check_enemy = this->board.board[1-i_player][j-2][k-1];
            //     score += piece_lock[check_enemy];
            //   }
            //   if(this->board.board[1-i_player][j-2][k+1] > 0 && j-2>=0 && k+1 < BOARD_W){
            //     auto check_enemy = this->board.board[1-i_player][j-2][k-1];
            //     score += piece_lock[check_enemy];
            //   }
            //   if(this->board.board[1-i_player][j-1][k+2] > 0 && j-1 >=0 && k+2 < BOARD_W){
            //     auto check_enemy = this->board.board[1-i_player][j-2][k-1];
            //     score += piece_lock[check_enemy];
            //   }
            //   if(this->board.board[1-i_player][j+1][k+2] > 0 && j+1 <BOARD_H && k+2 < BOARD_W){
            //     auto check_enemy = this->board.board[1-i_player][j-2][k-1];
            //     score += piece_lock[check_enemy];
            //   }
            //   if(this->board.board[1-i_player][j+2][k+1] > 0 && j+2 < BOARD_H && k+1 < BOARD_W){
            //     auto check_enemy = this->board.board[1-i_player][j-2][k-1];
            //     score += piece_lock[check_enemy];
            //   }
            //   if(this->board.board[1-i_player][j+2][k-1] > 0 && j+2 < BOARD_H && k-1 >=0){
            //     auto check_enemy = this->board.board[1-i_player][j-2][k-1];
            //     score += piece_lock[check_enemy];
            //   }
            //   if(this->board.board[1-i_player][j+1][k-2] > 0 && j+1 < BOARD_H && k-2 >=0){
            //     auto check_enemy = this->board.board[1-i_player][j-2][k-1];
            //     score += piece_lock[check_enemy];
            //   }
            //   if(this->board.board[1-i_player][j-1][k-2] > 0 && j-1 >=0 && k-2 >=0){
            //     auto check_enemy = this->board.board[1-i_player][j-2][k-1];
            //     score += piece_lock[check_enemy];
            //   }
            // }
            score += (i_player == player)? knight_value: -(knight_value);
            break;
          case 4:
            // if(i_player == player){
            //   for(int l=1; l<5; l++){
            //     if(j-l >= 0 && k-l >=0){
            //       if(this->board.board[1-i_player][j-l][k-l] > 0){
            //         auto check_enemy = this->board.board[1-i_player][j-l][k-l];
            //         score += piece_lock[check_enemy];
            //       }
            //     }
            //     if(j-l >=0 && k+l < BOARD_W){
            //       if(this->board.board[1-i_player][j-l][k+l] > 0){
            //         auto check_enemy = this->board.board[1-i_player][j-l][k+l];
            //         score += piece_lock[check_enemy];
            //       }
            //     }
            //     if(j+l < BOARD_H && k+l < BOARD_W){
            //       if(this->board.board[1-i_player][j+l][k+l] > 0){
            //         auto check_enemy = this->board.board[1-i_player][j+l][k+l];
            //         score += piece_lock[check_enemy];
            //       }
            //     }
            //     if(j+l < BOARD_H && k-l >=0){
            //       if(this->board.board[1-i_player][j+l][k-l] > 0){
            //         auto check_enemy = this->board.board[1-i_player][j+l][k-l];
            //         score += piece_lock[check_enemy];
            //       }
            //     }
            //   }
            // }
            score += (i_player == player)? bishop_value : -(bishop_value);
            break;
          case 5:
            // if(i_player == player){
            //   for(int l=1; l<6; l++){
            //     if(j-l >=0){
            //       if(this->board.board[1-i_player][j-l][k] >0){
            //         auto check_enemy = this->board.board[1-i_player][j+l][k-l];
            //         score += piece_lock[check_enemy];
            //       }
            //     }
            //     if(j+l < BOARD_H){
            //       if(this->board.board[1-i_player][j+l][k] >0){
            //         auto check_enemy = this->board.board[1-i_player][j+l][k];
            //         score += piece_lock[check_enemy];
            //       }
            //     }
            //     if(k-l >=0){
            //       if(this->board.board[1-i_player][j][k-l] >0){
            //         auto check_enemy = this->board.board[1-i_player][j][k-l];
            //         score += piece_lock[check_enemy];
            //       }
            //     }
            //     if(k+l < BOARD_W){
            //       if(this->board.board[1-i_player][j][k+l] >0){
            //         auto check_enemy = this->board.board[1-i_player][j][k+l];
            //         score += piece_lock[check_enemy];
            //       }
            //     }
            //     //diagonal
            //     if(j-l >= 0 && k-l >=0){
            //       if(this->board.board[1-i_player][j-l][k-l] > 0){
            //         auto check_enemy = this->board.board[1-i_player][j-l][k-l];
            //         score += piece_lock[check_enemy];
            //       }
            //     }
            //     if(j-l >=0 && k+l < BOARD_W){
            //       if(this->board.board[1-i_player][j-l][k+l] > 0){
            //         auto check_enemy = this->board.board[1-i_player][j-l][k+l];
            //         score += piece_lock[check_enemy];
            //       }
            //     }
            //     if(j+l < BOARD_H && k+l < BOARD_W){
            //       if(this->board.board[1-i_player][j+l][k+l] > 0){
            //         auto check_enemy = this->board.board[1-i_player][j+l][k+l];
            //         score += piece_lock[check_enemy];
            //       }
            //     }
            //     if(j+l < BOARD_H && k-l >=0){
            //       if(this->board.board[1-i_player][j+l][k-l] > 0){
            //         auto check_enemy = this->board.board[1-i_player][j+l][k-l];
            //         score += piece_lock[check_enemy];
            //       }
            //     }
            //   }

            // }
            score += (i_player == player)? queen_value : -(queen_value);
            break;
          case 6:
            score += (i_player == player)? king_value : -(king_value);
            break;
          default:
            score += 0;
            break;
        }
      }
    }
  }
  return score; //return heuristic score.
}