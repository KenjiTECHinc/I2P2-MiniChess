C:\Users\Dell G3\OneDrive\เอกสาร\I2P2-MiniChess

/mnt/c/Users/Dell\ G3/OneDrive/เอกสาร/I2P2-MiniChess

./build/main ./build/player_random ./build/baseline1

./build/main ./build/player_minimax ./build/baseline1

./build/main ./build/player_mini_alphabeta ./build/baseline1
./build/main ./build/baseline1 ./build/player_mini_alphabeta
./build/main ./build/player_mini_alphabeta ./build/baseline2
./build/main ./build/baseline2 ./build/player_mini_alphabeta

./build/main ./build/baseline2 ./build/player_random


const int W_pawn_value[6][5] = {
    0,   0,   0,   0,   0,
   50,  50,  50,  50,  50,
   10,  20,  30,  20,  10,
   -5,   5,  10,   5,   0, 
  -10,   0,   0, -10, -20,
    0,   0,   0,   0,   0
};
const int B_pawn_value[6][5] = {
    0,   0,   0,   0,   0,
  -20, -10,   0,   0, -10,
    0,   5,  10,   5,  -5,
   10,  20,  30,  20,  10, 
   50,  50,  50,  50,  50,
    0,   0,   0,   0,   0
};

//const int rook_value = 6;

const int W_rook_value[6][5] = {
    0,   0,   0,   0,   0,
    5,  10,  10,  10,  10,
   -5,   0,   0,   0,  -5,
   -5,   0,   0,   0,  -5, 
   -5,   0,   0,   0,  -5,
    0,   0,   0,   0,   0
};
const int B_rook_value[6][5] = {
    0,   0,   0,   0,   0,
   -5,   0,   0,   0,  -5,
   -5,   0,   0,   0,  -5,
   -5,   0,   0,   0,  -5, 
   10,  10,  10,  10,   5,
    0,   0,   0,   0,   0
};
//const int knight_value = 7;

const int W_knight_value[6][5] = {
  -40, -20, -10, -20, -40,
  -30,   0,   0,   0, -30,
  -10,   5,  10,   5, -20,
    5,   0,   5,   0, -20, 
  -30,   0,   0,   0, -30,
  -40, -20, -10, -20, -40
};
const int B_knight_value[6][5] = {
  -40, -20, -10, -20, -40,
  -30,   0,   0,   0, -30,
  -20,   0,   5,   0,   5,
  -20,   5,  10,   5, -10, 
  -30,   0,   0,   0, -30,
  -40, -20, -10, -20, -40
};
//const int bishop_value = 8;

const int W_bishop_value[6][5] = {
  -20, -10, -10, -10, -20, 
  -10,   0,   0,   0, -10, 
  -10,   0,   5,   0, -10, 
  -10,  10,  10,  10, -10, 
  -10,   5,   0,   5,   0,
  -20, -10, -10, -10, -20
};
const int B_bishop_value[6][5] = {
  -20, -10, -10, -10, -20, 
    0,   5,   0,   5, -10, 
  -10,  10,  10,  10, -10, 
  -10,   0,   5,   0, -10, 
  -10,   0,   0,   0, -10,
  -20, -10, -10, -10, -20
};
//const int queen_value = 20;

const int W_queen_value[6][5] = {
   -5,  -5, -10, -10, -10,
   -5,   0,   0,   0,   0,
    0,   5,   5,   5,   0,
    0,   5,   5,   5,   0,
    0,   0,   5,   0,   5,
   -5, -10, -10,  -5,  -5
};
const int B_queen_value[6][5] = {
   -5,  -5, -10, -10,  -5,
    5,   0,   5,   0,   0,
    0,   5,   5,   5,   0,
    0,   5,   5,   5,   0,
    0,   0,   0,   0,   0,
  -10, -10, -10,  -5,  -5
};
//const int king_value = 1000000000;

const int W_king_value[6][5] = {
  -50, -50, -40, -40, -30,
  -50, -50, -40, -40, -30,
  -50, -40, -30, -30, -30,
  -10, -20, -20, -20, -20,
   10,   0,   0,   0,   0,
   10,  10,   5,   0,   0
};
const int B_king_value[6][5] = {
    0,   0,   5,  10,  10,
    0,   0,   0,   0,  10,
  -20, -20, -20, -20, -10,
  -30, -30, -30, -40, -50,
  -30, -40, -40, -50, -50,
  -30, -40, -40, -50, -50
};


int State::evaluate(){
  // [TODO] design your own evaluation function
  int pl1=0, pl2=0;
  for(int i = 0; i<2; i++)
  {
    for(int j = 0; j<BOARD_H; j++)
    {
      for(int k = 0; k<BOARD_W; k++)
      {
        if(i == 0)
        {
          if(this->board.board[i][j][k] == '1' || this->board.board[i][j][k] == 1)
          {
            pl1 += 2;
          }
          if(this->board.board[i][j][k] == '2' || this->board.board[i][j][k] == 2)
          {
            pl1 += 6;
          }
          if(this->board.board[i][j][k] == '3' || this->board.board[i][j][k] == 3)
          {
            pl1 += 7;
          }
          if(this->board.board[i][j][k] == '4' || this->board.board[i][j][k] == 4)
          {
            pl1 += 8;
          }
          if(this->board.board[i][j][k] == '5' || this->board.board[i][j][k] == 5)
          {
            pl1 += 20;
          }
          if(this->board.board[i][j][k] == '6' || this->board.board[i][j][k] == 6)
          {
            pl1 += 100;
          }
        }
        else
        {
          if(this->board.board[i][j][k] == '1' || this->board.board[i][j][k] == 1)
          {
            pl2 += 2;
          }
          if(this->board.board[i][j][k] == '2' || this->board.board[i][j][k] == 2)
          {
            pl2 += 6;
          }
          if(this->board.board[i][j][k] == '3' || this->board.board[i][j][k] == 3)
          {
            pl2 += 7;
          }
          if(this->board.board[i][j][k] == '4' || this->board.board[i][j][k] == 4)
          {
            pl2 += 8;
          }
          if(this->board.board[i][j][k] == '5' || this->board.board[i][j][k] == 5)
          {
            pl2 += 20;
          }
          if(this->board.board[i][j][k] == '6' || this->board.board[i][j][k] == 6)
          {
            pl2 += 100;
          } 
        }
      }
    }
  }
  return pl1 - pl2;
}